     1                                  ; text section must have an GLOBAL entry point 'main'
     2                                  ; text section must end with 'ret' instruction
     3                                  ; must include "asm_io.inc"
     4                                  ;	% nasm -f elf sample_io.asm
     5                                  ;	% nasm -f elf -d ELF_TYPE asm_io.asm
     6                                  ;	% gcc -o sample_io sample_io.o asm_io.o	
     7                                  ;	% ./sample_io
     8                                  
     9                                  %include "asm_io.inc"
    10                              <1> 	extern  read_int, print_int, print_string
    11                              <1> 	extern	read_char, print_char, print_nl
    12                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    13                              <1> 
    14                              <1> %macro 	dump_regs 1
    15                              <1> 	push	  dword %1
    16                              <1> 	call	  sub_dump_regs
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> 
    20                              <1> ;
    21                              <1> ; usage: dump_mem label, start-address, # paragraphs
    22                              <1> %macro  dump_mem 3
    23                              <1> 	push	 dword %1
    24                              <1> 	push	 dword %2
    25                              <1> 	push	 dword %3
    26                              <1> 	call	 sub_dump_mem
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro	dump_math 1
    30                              <1> 	push	 dword %1
    31                              <1> 	call	 sub_dump_math
    32                              <1> %endmacro
    33                              <1> 
    34                              <1> %macro  dump_stack 3
    35                              <1> 	push	 dword %3
    36                              <1>         push     dword %2
    37                              <1> 	push	 dword %1
    38                              <1>         call     sub_dump_stack
    39                              <1> %endmacro
    40                                  	
    41                                  	section .data
    42 00000000 61736D5F696F206C69-     msg	db	"asm_io library test", 0x0a, 0x00
    43 00000009 627261727920746573-
    44 00000012 740A00             
    45                                  
    46                                  	section .bss
    47 00000000 <res 0000000C>          string	resb	12
    48                                  
    49                                  	section .text
    50                                  	global main
    51                                  main:
    52 00000000 C8000000                	enter	0,0
    53                                  
    54                                  	dump_regs	1
    55 00000004 6A01                <1>  push dword %1
    56 00000006 E8(00000000)        <1>  call sub_dump_regs
    57                                  	;print out a new line character
    58 0000000B E8(00000000)            	call	print_nl
    59                                  
    60                                  	; print out a character whose ASCII value stored in AL
    61 00000010 B041                    	mov	al, 'A'
    62 00000012 E8(00000000)            	call	print_char	
    63 00000017 E8(00000000)            	call	print_nl
    64                                  	dump_regs	2
    65 0000001C 6A02                <1>  push dword %1
    66 0000001E E8(00000000)        <1>  call sub_dump_regs
    67                                  	;print out a new line character
    68 00000023 E8(00000000)            	call	print_nl
    69                                  
    70                                  	; print out value of integer stored in EAL
    71 00000028 B800002000                      mov     eax,1024*1024*2
    72 0000002D E8(00000000)                    call	print_int
    73 00000032 E8(00000000)            	call	print_nl
    74                                  	dump_regs	3
    75 00000037 6A03                <1>  push dword %1
    76 00000039 E8(00000000)        <1>  call sub_dump_regs
    77                                  	;print out a new line character
    78 0000003E E8(00000000)            	call	print_nl
    79                                  
    80                                  	; print out the contents of the string at the address 
    81                                  	; stored in EAX
    82 00000043 B8[00000000]            	mov	eax, msg
    83 00000048 E8(00000000)            	call	print_string
    84                                  	dump_regs	4
    85 0000004D 6A04                <1>  push dword %1
    86 0000004F E8(00000000)        <1>  call sub_dump_regs
    87                                  	;print out a new line character
    88 00000054 E8(00000000)            	call	print_nl
    89                                  
    90 00000059 E8(00000000)            	call	read_int
    91 0000005E E8(00000000)            	call	print_int
    92 00000063 E8(00000000)            	call	print_nl
    93                                  
    94 00000068 C9                      	leave
    95 00000069 C3                      	ret
