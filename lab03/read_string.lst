     1                                  %include "asm_io.inc"
     2                              <1> 	extern  read_int, print_int, print_string
     3                              <1> 	extern	read_char, print_char, print_nl
     4                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     5                              <1> 
     6                              <1> %macro 	dump_regs 1
     7                              <1> 	push	  dword %1
     8                              <1> 	call	  sub_dump_regs
     9                              <1> %endmacro
    10                              <1> 
    11                              <1> 
    12                              <1> ;
    13                              <1> ; usage: dump_mem label, start-address, # paragraphs
    14                              <1> %macro  dump_mem 3
    15                              <1> 	push	 dword %1
    16                              <1> 	push	 dword %2
    17                              <1> 	push	 dword %3
    18                              <1> 	call	 sub_dump_mem
    19                              <1> %endmacro
    20                              <1> 
    21                              <1> %macro	dump_math 1
    22                              <1> 	push	 dword %1
    23                              <1> 	call	 sub_dump_math
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro  dump_stack 3
    27                              <1> 	push	 dword %3
    28                              <1>         push     dword %2
    29                              <1> 	push	 dword %1
    30                              <1>         call     sub_dump_stack
    31                              <1> %endmacro
    32                                  
    33                                  	segment	.data
    34                                  	;
    35                                  	; initialized data is put in the data segment here
    36                                  	;
    37                                  
    38                                  	segment .bss
    39 00000000 <res 00000020>          string	resb 32
    40                                  
    41                                  	segment	.text
    42                                  	global 	main
    43                                  main
    44 00000000 C8000000                	enter	0,0		; setup stack frame
    45 00000004 60                      	pusha
    46                                  	
    47                                  	;
    48                                  	; code is put in the text segment. Do not modify the code before
    49                                  	; or after this comment.
    50                                  	;
    51 00000005 BA00000000              	mov 	edx, 0
    52 0000000A E8(00000000)            repeat: call	read_char
    53 0000000F 8882[00000000]          	mov 	byte[string + edx], al
    54 00000015 42                      	inc 	edx
    55 00000016 3C0A                    	cmp	al, 0x0a
    56 00000018 75F0                    	jne	repeat
    57 0000001A C682[FFFFFFFF]00        	mov	byte[string + edx - 1], 0
    58 00000021 B8[00000000]            	mov	eax,	string
    59 00000026 E8(00000000)            	call	print_string
    60 0000002B 61                      	popa
    61 0000002C B800000000              	mov	eax, 0	; return value
    62 00000031 C9                      	leave			; leave stack frame
    63 00000032 C3                      	ret
